<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT60xx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT60xx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Sat May 16 17:19:01 2020
<BR><P>
<H3>Maximum Stack Usage =       1944 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Do_TRx &rArr; Do_SCI &rArr; Write645Data &rArr; ChkDispItem &rArr; Get645Data &rArr; RxOverIphRecord &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[146]">Copy_FlashInfo</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e8]">Read_EEData</a><BR>
 <LI><a href="#[121]">Write_EEData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[122]">SetEBit</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[1d]">Reserved_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">Reserved_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">AES_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[1f]">DMA_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[1e]">EMU_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[8]">EXTI0_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[9]">EXTI1_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[a]">EXTI2_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[b]">EXTI3_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[c]">EXTI4_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[d]">EXTI5_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[e]">EXTI6_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_ht501x.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[1b]">I2C_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[41]">Jbregread</a> from trx.o(.text) referenced 2 times from trx.o(.constdata)
 <LI><a href="#[40]">Jlregread</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[3e]">Jlrestore</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[20]">KEY_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_ht501x.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[6]">PMU_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_ht501x.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[2c]">ReadEEPROMFData</a> from trx.o(.text) referenced 4 times from trx.o(.constdata)
 <LI><a href="#[3c]">ReadExtEEprom</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[3b]">ReadFlashData</a> from trx.o(.text) referenced 2 times from trx.o(.constdata)
 <LI><a href="#[42]">ReadIDTime</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[2b]">ReadSTD</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[37]">ReadVer</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[2d]">ReadWriteActUseMode</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[27]">ReadWriteStartTm</a> from trx.o(.text) referenced 4 times from trx.o(.constdata)
 <LI><a href="#[2a]">ReadWriteTRxNum</a> from trx.o(.text) referenced 3 times from trx.o(.constdata)
 <LI><a href="#[26]">ReadWriteTime</a> from trx.o(.text) referenced 3 times from trx.o(.constdata)
 <LI><a href="#[1d]">Reserved_IRQHandler</a> from startup_ht501x.o(.text) referenced 6 times from startup_ht501x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_ht501x.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[22]">Rtc_Get_callback</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[52]">RxChgTRXBd</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[45]">RxClrEventRcd</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[44]">RxClrUseRcd</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[4c]">RxEOpenRcd</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[4b]">RxFrozeDTRcd</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[4a]">RxHLDRcd</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[4e]">RxJDErrRcd</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[4d]">RxKeyChgRcd</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[49]">RxOneByteRcd</a> from trx.o(.text) referenced 2 times from trx.o(.constdata)
 <LI><a href="#[51]">RxOrderFroze</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[55]">RxProgChip</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[50]">RxPublicWriteTime</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[4f]">RxPwrErrRcd</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[43]">RxPwrOffRcd</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[54]">RxTRxRead</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[46]">RxTimeRcd</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[47]">RxTmTblSetRcd</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[33]">RxWriteKey</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[53]">RxWriteSPMode</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[48]">RxYTblSetRcd</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[1c]">SPI0_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_ht501x.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[28]">SetFacMode</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[5]">SysTick_Handler</a> from systickapp.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[23]">SystemInit</a> from system_ht6xxx.o(.text) referenced from startup_ht501x.o(.text)
 <LI><a href="#[19]">TBS_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[15]">TIMER_0_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[16]">TIMER_1_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[17]">TIMER_2_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[18]">TIMER_3_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[13]">UART4_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[14]">UART5_IRQHandler</a> from ht6xxx_it.o(.text) referenced from startup_ht501x.o(RESET)
 <LI><a href="#[2e]">WriteBaud</a> from trx.o(.text) referenced 3 times from trx.o(.constdata)
 <LI><a href="#[3a]">WriteEXTEEPROM</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[31]">WriteFHStartTm</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[29]">WriteFLMode</a> from trx.o(.text) referenced 3 times from trx.o(.constdata)
 <LI><a href="#[30]">WriteFMode</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[39]">WriteFlashSet</a> from trx.o(.text) referenced 2 times from trx.o(.constdata)
 <LI><a href="#[32]">WriteFrozeDT</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[36]">WriteFrozeHM</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[35]">WriteHFrozeStep</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[38]">WriteMSet</a> from trx.o(.text) referenced 3 times from trx.o(.constdata)
 <LI><a href="#[34]">WriteRunType</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[2f]">WriteWeekTblNum</a> from trx.o(.text) referenced 2 times from trx.o(.constdata)
 <LI><a href="#[3d]">Write_meterconfig</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[24]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht501x.o(.text)
 <LI><a href="#[3f]">effective_value</a> from trx.o(.text) referenced from trx.o(.constdata)
 <LI><a href="#[25]">fputc</a> from fputc.o(i.fputc) referenced from printf6.o(i.__0fprintf$6)
 <LI><a href="#[21]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[24]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(.text)
</UL>
<P><STRONG><a name="[1f7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[56]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1f2]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1f8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1f9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1fa]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1fb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1fc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5b]"></a>Up_BkLVSave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Use
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Feilv
</UL>

<P><STRONG><a name="[58]"></a>Do_Use</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Do_Use &rArr; Inc_Use &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EPADR
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inc_Use
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_BkLVSave
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>Up_LVSave</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Up_LVSave &rArr; Record_Put &rArr; Record_Get_First &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Feilv
</UL>

<P><STRONG><a name="[5e]"></a>DianLian_Restore</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DianLian_Restore &rArr; Record_Get_First &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Get_First
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>Rtc_Get_callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Rtc_Get_callback &rArr; Rtc_Get_SafeIo &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Get_SafeIo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>CMU_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CMU_Init &rArr; HT_CMU_Init &rArr; Wait2mS
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 1234 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = main &rArr; Do_TRx &rArr; Do_SCI &rArr; Write645Data &rArr; ChkDispItem &rArr; Get645Data &rArr; RxOverIphRecord &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeclock_get
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeclock_clear
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stBedge
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softtimer_run
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFlashinfo_Restore
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstruct_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ECADR
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Cnt_Exchange_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SoftTime
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOffLine
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_BCD
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_RTC_ITConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrTimeCnt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Var_Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_TRx
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Disp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseProgRecord
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5l
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DianLian_Restore
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_LVSave
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Use
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[87]"></a>open_pll</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[88]"></a>open_pll_tmp</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_get_rmsi1
</UL>

<P><STRONG><a name="[1fd]"></a>close_pll</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>MeterData_Get</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[8b]"></a>toascii</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfdatano
</UL>

<P><STRONG><a name="[8a]"></a>printfdatano</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toascii
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[6]"></a>PMU_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMU_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTick_Interrupt_On
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTick_Interrupt_Off
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLine_Dete
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_PMU_ITFlagStatusGet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_PMU_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>AES_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht6xxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ITFlagStatusGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ClearITPendingBit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ITFlagStatusGet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ITFlagStatusGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ClearITPendingBit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ITFlagStatusGet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ITFlagStatusGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ClearITPendingBit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ITFlagStatusGet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ITFlagStatusGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ClearITPendingBit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ITFlagStatusGet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ITFlagStatusGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ClearITPendingBit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ITFlagStatusGet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ITFlagStatusGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ClearITPendingBit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ITFlagStatusGet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ITFlagStatusGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ClearITPendingBit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ITFlagStatusGet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART0_IRQHandler &rArr; Uart_SendIntFun &rArr; UART_INTENABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendIntFun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceIntFun
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_ITFlagStatusGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_ITFlagStatusGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_ITFlagStatusGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART3_IRQHandler &rArr; Uart_SendIntFun &rArr; UART_INTENABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendIntFun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceIntFun
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_ITFlagStatusGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_ClearITPendingBit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_ISO7816_ITFlagStatusGet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_ISO7816_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART4_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_ITFlagStatusGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_ClearITPendingBit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_ISO7816_ITFlagStatusGet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_ISO7816_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART5_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_ITFlagStatusGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER_0_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMR_ITFlagStatusGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMR_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER_1_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMR_ITFlagStatusGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMR_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER_2_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMR_ITFlagStatusGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMR_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER_3_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMR_ITFlagStatusGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMR_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TBS_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TBS_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TBS_ITFlagStatusGet
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TBS_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ht6xxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht6xxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI0_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ht6xxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SPI_ITFlagStatusGet
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SPI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EMU_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht6xxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht6xxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>KEY_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht6xxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>softtimer_run</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, soft_timer_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = softtimer_run
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fe]"></a>RSet_SoftTime</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, soft_timer_filter.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>Set_SoftTime</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, soft_timer_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_SoftTime
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>LCD_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Init &rArr; HT_CMU_ClkCtrl0Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_ClkCtrl0Config
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>UpdateDisp</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lcdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDispProg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_ht6xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_ht501x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht501x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht501x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht501x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht501x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Reserved_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht501x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[1ff]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[202]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>stBedge</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bit_edge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stBedge
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[203]"></a>DTbitSave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bit_edge.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>DTbitGet</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bit_edge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DTbitGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstruct_init
</UL>

<P><STRONG><a name="[76]"></a>timeclock_get</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, bit_edge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeclock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>timeclock_clear</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, bit_edge.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>bitstruct_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bit_edge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bitstruct_init &rArr; DTbitGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTbitGet
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_get_rmsi1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pll_tmp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pll
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Init
</UL>

<P><STRONG><a name="[59]"></a>Read_EPADR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_StructData_To_Chip
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_get_rmsi1
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPowerP
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadI1rms
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUrms
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Use
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jbregread
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jlregread
</UL>

<P><STRONG><a name="[a7]"></a>Read_ECADR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_get_rmsi1
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Chip_to_StructData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Var_Write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jbregread
</UL>

<P><STRONG><a name="[a6]"></a>Emu_Chip_to_StructData</STRONG> (Thumb, 850 bytes, Stack size 8 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Emu_Chip_to_StructData &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ECADR
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var_const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var_32k
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var_225k
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_var_cal
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jbregread
</UL>

<P><STRONG><a name="[84]"></a>Write_ECADR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_StoretData_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_StructData_To_Chip
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_get_rmsi1
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_StoretData_To_Chip
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jbregread
</UL>

<P><STRONG><a name="[a9]"></a>Emu_StoretData_To_Chip</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Emu_StoretData_To_Chip
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ECADR
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_StoretData_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_var_cal
</UL>

<P><STRONG><a name="[6f]"></a>emu_init</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = emu_init &rArr; emu_var_cal &rArr; Emu_Chip_to_StructData &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_var_cal
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EPADR
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>get_checksum</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, emu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var_const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var_32k
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var_225k
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var
</UL>

<P><STRONG><a name="[ac]"></a>check_checksum</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var_const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var_32k
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var_225k
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
</UL>

<P><STRONG><a name="[204]"></a>emu_calibrate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emu.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>GetAVR</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetAVR
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_read
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
</UL>

<P><STRONG><a name="[73]"></a>vol_read</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vol_read &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVR
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>emu_proc</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = emu_proc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVR
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_checksum
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>ReadUrms</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EPADR
</UL>

<P><STRONG><a name="[bc]"></a>ReadI1rms</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EPADR
</UL>

<P><STRONG><a name="[bd]"></a>ReadPowerP</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EPADR
</UL>

<P><STRONG><a name="[bf]"></a>fast_get_rmsi1</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ECADR
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ECADR
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EPADR
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pll_tmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_data
</UL>

<P><STRONG><a name="[c0]"></a>write_power_data</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_get_rmsi1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ECADR
</UL>

<P><STRONG><a name="[c2]"></a>Save_Energy</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[5a]"></a>Inc_Use</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Inc_Use &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Use
</UL>

<P><STRONG><a name="[c3]"></a>Emu_StructData_To_Chip</STRONG> (Thumb, 902 bytes, Stack size 4 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Emu_StructData_To_Chip
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ECADR
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EPADR
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5l
</UL>

<P><STRONG><a name="[c4]"></a>Chip_Trim_IB</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Chip_Trim_IB &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;effective_value
</UL>

<P><STRONG><a name="[c5]"></a>Chip_Trim_IB_1</STRONG> (Thumb, 544 bytes, Stack size 72 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Chip_Trim_IB_1 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_StructData_To_Chip
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5l
</UL>

<P><STRONG><a name="[82]"></a>Chip_Trim_5l</STRONG> (Thumb, 388 bytes, Stack size 72 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Chip_Trim_5l &rArr; Chip_Trim_IB_1 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_StructData_To_Chip
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>Chip_Trim_5</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_StructData_To_Chip
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[cb]"></a>Emu_Var_Write_io</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Emu_Var_Write_io &rArr; BlockEarse &rArr; Full_FF_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteWrite
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockEarse
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Var_Write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashSet
</UL>

<P><STRONG><a name="[83]"></a>Emu_Var_Write</STRONG> (Thumb, 88 bytes, Stack size 144 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Emu_Var_Write &rArr; Emu_Var_Write_io &rArr; BlockEarse &rArr; Full_FF_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Var_Write_io
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ECADR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;effective_value
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jbregread
</UL>

<P><STRONG><a name="[ce]"></a>Emu_StoretData_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_us
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_StoretData_To_Chip
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ECADR
</UL>

<P><STRONG><a name="[d1]"></a>Full_FF_Check</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, flash_filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Full_FF_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recode_CheckState
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockEarse
</UL>

<P><STRONG><a name="[d2]"></a>CRC_Calu</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flash_filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_Calu
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recode_CheckState
</UL>

<P><STRONG><a name="[d0]"></a>Recode_CheckState</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, flash_filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Recode_CheckState &rArr; CRC_Calu
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calu
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Full_FF_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Get_First
</UL>

<P><STRONG><a name="[205]"></a>Record_Comm</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, flash_filesystem.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>Record_Format</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, flash_filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Record_Format
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Put
</UL>

<P><STRONG><a name="[d3]"></a>Record_restore</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, flash_filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Record_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Get_First
</UL>

<P><STRONG><a name="[5f]"></a>Record_Get_First</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, flash_filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Record_Get_First &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_restore
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recode_CheckState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Put
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DianLian_Restore
</UL>

<P><STRONG><a name="[cc]"></a>BlockEarse</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, flash_filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BlockEarse &rArr; Full_FF_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_PageErase
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Full_FF_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init_app
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Var_Write_io
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Put
</UL>

<P><STRONG><a name="[5d]"></a>Record_Put</STRONG> (Thumb, 212 bytes, Stack size 80 bytes, flash_filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Record_Put &rArr; Record_Get_First &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Format
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteWrite
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockEarse
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Get_First
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_LVSave
</UL>

<P><STRONG><a name="[d6]"></a>FileSystem_Init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, flash_filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FileSystem_Init &rArr; BlockEarse &rArr; Full_FF_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockEarse
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init_app
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[d7]"></a>sEmuc_ResotreDef</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flash_filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = sEmuc_ResotreDef &rArr; McuFlashRandWriteStack &rArr; McuFlashRandWrite &rArr; McuFlashPageRandWrite &rArr; McuFlashPageSafeWrite &rArr; McuFlashPageWrite &rArr; HT_Flash_ByteWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashRandWriteStack
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jlrestore
</UL>

<P><STRONG><a name="[d9]"></a>sFlashInfo</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash_filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = sFlashInfo &rArr; McuFlashRandWriteStack &rArr; McuFlashRandWrite &rArr; McuFlashPageRandWrite &rArr; McuFlashPageSafeWrite &rArr; McuFlashPageWrite &rArr; HT_Flash_ByteWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashRandWriteStack
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[6d]"></a>System_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, flash_filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = System_Init &rArr; sFlashInfo &rArr; McuFlashRandWriteStack &rArr; McuFlashRandWrite &rArr; McuFlashPageRandWrite &rArr; McuFlashPageSafeWrite &rArr; McuFlashPageWrite &rArr; HT_Flash_ByteWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFlashInfo
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEmuc_ResotreDef
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockEarse
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>System_Init_app</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_filesystem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockEarse
</UL>

<P><STRONG><a name="[dc]"></a>SetDispBit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetDispBit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispBitLst
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDigitDisp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
</UL>

<P><STRONG><a name="[db]"></a>SetDigitDisp</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetDigitDisp &rArr; SetDispBit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispBit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispBitLst
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
</UL>

<P><STRONG><a name="[dd]"></a>SetDispBitLst</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetDispBitLst &rArr; SetDigitDisp &rArr; SetDispBit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDigitDisp
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispBit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
</UL>

<P><STRONG><a name="[75]"></a>UpDisp</STRONG> (Thumb, 1394 bytes, Stack size 40 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = UpDisp &rArr; Get645Data &rArr; RxOverIphRecord &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRamData
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_DispCode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrpCharRam
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDataAct
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispBitLst
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDigitDisp
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispBit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_OnDisplay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispItem
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_IRKeys
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Keys
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Disp
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxProgChip
</UL>

<P><STRONG><a name="[e7]"></a>SetpArry</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, disp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Keys
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispArry
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextItem
</UL>

<P><STRONG><a name="[e6]"></a>NextItem</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_DispCode
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetpArry
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Keys
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispArry
</UL>

<P><STRONG><a name="[e9]"></a>SetDispArry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextItem
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetpArry
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDispProg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_IRKeys
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Keys
</UL>

<P><STRONG><a name="[ea]"></a>Do_Keys</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispArry
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextItem
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetpArry
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTick_Interrupt_On
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTick_Interrupt_Off
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
</UL>

<P><STRONG><a name="[eb]"></a>Do_IRKeys</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispArry
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
</UL>

<P><STRONG><a name="[f1]"></a>UpBkltLED</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, disp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispItem
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Disp
</UL>

<P><STRONG><a name="[ec]"></a>ChkDispItem</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = ChkDispItem &rArr; Get645Data &rArr; RxOverIphRecord &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispItem
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSetDisp
</UL>

<P><STRONG><a name="[ee]"></a>AddDispBits</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddDispBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddUseLst
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDispSetBits
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSafeData
</UL>

<P><STRONG><a name="[ed]"></a>AddDispSetBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddDispSetBits &rArr; AddDispBits
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDispBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
</UL>

<P><STRONG><a name="[ef]"></a>AddUseLst</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AddUseLst &rArr; AddDispBits
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDispBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
</UL>

<P><STRONG><a name="[f0]"></a>SetDispItem</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = SetDispItem &rArr; UpDisp &rArr; Get645Data &rArr; RxOverIphRecord &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkDispItem
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpBkltLED
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSetDisp
</UL>

<P><STRONG><a name="[18b]"></a>SetDispSubItem</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, disp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrxDisp
</UL>

<P><STRONG><a name="[7e]"></a>Do_Disp</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = Do_Disp &rArr; UpDisp &rArr; Get645Data &rArr; RxOverIphRecord &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpBkltLED
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>InitDispProg</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRamData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispArry
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisp
</UL>

<P><STRONG><a name="[f3]"></a>Turn_OnDisplay</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
</UL>

<P><STRONG><a name="[66]"></a>DEBUG_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>GPIO_Init</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_GPIO_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>PMU_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PMU_Init &rArr; HT_PMU_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_PMU_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_PMU_ITConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>IsOffLine</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>OnLine_Dete</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, pmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_IRQHandler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_fun
</UL>

<P><STRONG><a name="[f8]"></a>UARR_Ir_Chanel_Init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, uartio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UARR_Ir_Chanel_Init &rArr; HT_UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_reset
</UL>

<P><STRONG><a name="[fa]"></a>UART_ini1t</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, uartio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_ClkCtrl1Config
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[fe]"></a>UART_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, uartio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_init &rArr; HT_UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_ClkCtrl1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_refresh
</UL>

<P><STRONG><a name="[ff]"></a>UART_INTENABLE</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, uartio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_INTENABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendIntFun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceIntFun
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_refresh
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_send_enable
</UL>

<P><STRONG><a name="[100]"></a>UART_Close</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uartio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_cSilence_fun
</UL>

<P><STRONG><a name="[102]"></a>UART_SendIntEnable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uartio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SendIntEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_send_enable
</UL>

<P><STRONG><a name="[99]"></a>Uart_ReceIntFun</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uartio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart_ReceIntFun &rArr; UART_INTENABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_rece_fun_645
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Struct_Get
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>Uart_SendIntFun</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, uartio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart_SendIntFun &rArr; UART_INTENABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_send_fun_645
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Struct_Get
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[17c]"></a>SystemTick_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systickapp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_OffLIne_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_OnLIne_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSys_Statu_Detc
</UL>

<P><STRONG><a name="[206]"></a>SystemTick_Stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systickapp.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>SystemTick_Interrupt_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systickapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Keys
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>SystemTick_Interrupt_Off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systickapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Keys
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>SysTick_fun</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, systickapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SysTick_fun &rArr; stream_cSilence_fun &rArr; stream_reset &rArr; UARR_Ir_Chanel_Init &rArr; HT_UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLine_Dete
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_cSilence_fun
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_break
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_FreeDog
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, systickapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SysTick_Handler &rArr; SysTick_fun &rArr; stream_cSilence_fun &rArr; stream_reset &rArr; UARR_Ir_Chanel_Init &rArr; HT_UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_fun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht501x.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>EEData_Fun_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EEData_Fun_Init &rArr; ClrRam &rArr; SetRamData
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEData_Safe_Read
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData1
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData1
</UL>

<P><STRONG><a name="[10c]"></a>DelayTBOC1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DelayTBOC1 &rArr; HAL_Delay_us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData1
</UL>

<P><STRONG><a name="[10e]"></a>Set_SDA_OUT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, eeprom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WByte
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ACK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
</UL>

<P><STRONG><a name="[112]"></a>Set_SDA_IN</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, eeprom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FStop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WByte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RByte
</UL>

<P><STRONG><a name="[10f]"></a>I2C_Delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, eeprom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_I2C
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WByte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RByte
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ACK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
</UL>

<P><STRONG><a name="[10d]"></a>I2C_Stop</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_I2C
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_I2C
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FStop
</UL>

<P><STRONG><a name="[110]"></a>I2C_ACK</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_I2C
</UL>

<P><STRONG><a name="[111]"></a>I2C_RByte</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_RByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_I2C
</UL>

<P><STRONG><a name="[113]"></a>I2C_WByte</STRONG> (Thumb, 146 bytes, Stack size 4 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_WByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_IN
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_I2C
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_I2C
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I2C_Addr
</UL>

<P><STRONG><a name="[114]"></a>I2C_FStop</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_FStop &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[115]"></a>I2C_Start</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Start &rArr; I2C_FStop &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FStop
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_IN
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_I2C
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I2C_Addr
</UL>

<P><STRONG><a name="[117]"></a>rev32</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rev32
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I2C_Addr
</UL>

<P><STRONG><a name="[116]"></a>Send_I2C_Addr</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Send_I2C_Addr &rArr; I2C_Start &rArr; I2C_FStop &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rev32
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_I2C
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_I2C
</UL>

<P><STRONG><a name="[118]"></a>Read_I2C</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Read_I2C &rArr; Send_I2C_Addr &rArr; I2C_Start &rArr; I2C_FStop &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I2C_Addr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WByte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RByte
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ACK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData1
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData1
</UL>

<P><STRONG><a name="[119]"></a>Read_EEData1</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Read_EEData1 &rArr; Read_I2C &rArr; Send_I2C_Addr &rArr; I2C_Start &rArr; I2C_FStop &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cCopyRam
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_I2C
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEData_Fun_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
</UL>

<P><STRONG><a name="[e8]"></a>Read_EEData</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDGTm_Refresh
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SYS_Statu
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDataErr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEData_Fun_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextItem
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exteeprom_2_FlashInfo
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadExtEEprom
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxHLDRcd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxYTblSetRcd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTmTblSetRcd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FHRcd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ELVSave
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEData_Safe_Read
</UL>

<P><STRONG><a name="[11e]"></a>Write_I2C</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Write_I2C &rArr; Send_I2C_Addr &rArr; I2C_Start &rArr; I2C_FStop &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I2C_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WByte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData1
</UL>

<P><STRONG><a name="[11f]"></a>Write_EEData1</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Write_EEData1 &rArr; Write_I2C &rArr; Send_I2C_Addr &rArr; I2C_Start &rArr; I2C_FStop &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_I2C
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_I2C
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTBOC1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEData_Fun_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
</UL>

<P><STRONG><a name="[121]"></a>Write_EEData</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + In Cycle
<LI>Call Chain = Write_EEData &rArr;  SetEBit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDGTm_Refresh
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SYS_Statu
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDataErr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEData_Fun_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_FlashData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFlashinfo_dianlian_backup
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FHFroze
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FHSet
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Froze
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_EEData4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
</UL>

<P><STRONG><a name="[123]"></a>EEData_Safe_Read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = EEData_Safe_Read &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEData_Fun_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cGet_First_Data
</UL>

<P><STRONG><a name="[13d]"></a>RevStr</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RevStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeLst
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRX_Ctrl_Code
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSafeData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rev_4
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevStrLst
</UL>

<P><STRONG><a name="[124]"></a>ChgMOD_2</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
</UL>

<P><STRONG><a name="[125]"></a>ChgMOD_1</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ChgMOD_1 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
</UL>

<P><STRONG><a name="[126]"></a>GetFrozeMinCnt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetFrozeMinCnt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cCopyRam
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkYFroze
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MStepFroze
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_AllUse
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOrderFroze
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FHSet
</UL>

<P><STRONG><a name="[127]"></a>MulDivX</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[12a]"></a>tpCharInc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FpCharRam
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormCopy
</UL>

<P><STRONG><a name="[128]"></a>NormCopy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NormCopy &rArr; CopyRam
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckpChar
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpCharInc
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jbregread
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jlregread
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DIV_READ
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxJDRecord
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFacMode
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSafeData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_BCDData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
</UL>

<P><STRONG><a name="[12c]"></a>RevCopyRam</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RevCopyRam
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jbregread
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxClrRecord
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTRxRead
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTime
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSafeData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopy_4
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopy
</UL>

<P><STRONG><a name="[12b]"></a>RevCopy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RevCopy &rArr; RevCopyRam
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckpChar
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopyRam
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpCharInc
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEPROMFData
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFrozeDTRcd
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSTD
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTRxNum
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSafeData
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvDataAddr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
</UL>

<P><STRONG><a name="[199]"></a>SetpCharInc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAAInc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutTTBL
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutYTBL
</UL>

<P><STRONG><a name="[12e]"></a>HEX</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeLst
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHFrozeStep
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFLMode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCCnt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXLst
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_Hex
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_2_HT5019RTC
</UL>

<P><STRONG><a name="[12d]"></a>BCD_Hex</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BCD_Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFLMode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSafeData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
</UL>

<P><STRONG><a name="[12f]"></a>Copy_4</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Copy_4 &rArr; CopyRam
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDataAct
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRX_Ctrl_Code
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTime
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSafeState
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFHTime
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewProgRcd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddProgRecord
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
</UL>

<P><STRONG><a name="[130]"></a>BCD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Get_SafeIo
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_BCD
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeLst
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutTTBL
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutYTBL
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDLst
</UL>

<P><STRONG><a name="[7b]"></a>Hex_BCD</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Hex_BCD &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEPROMFData
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSTD
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSafeData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_BCDData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
</UL>

<P><STRONG><a name="[e1]"></a>SetRamData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetRamData
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDispProg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_OnLIne_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRam
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvDataAddr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FpCharRam
</UL>

<P><STRONG><a name="[131]"></a>FpCharRam</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FpCharRam &rArr; SetRamData
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRamData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpCharInc
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrpCharRam
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetpCharRam
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvDataAddr
</UL>

<P><STRONG><a name="[e3]"></a>ClrpCharRam</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ClrpCharRam &rArr; FpCharRam &rArr; SetRamData
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FpCharRam
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxHLDRcd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTmTblSetRcd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxJDRecord
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxProgRcd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillNullData
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvDataAddr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
</UL>

<P><STRONG><a name="[132]"></a>MvData</STRONG> (Thumb, 662 bytes, Stack size 40 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRamData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrpCharRam
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_BCD
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_Hex
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopyRam
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFLUse
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPwrOffRcd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxJDRecord
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOverIphRecord
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutHTBL
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvTimeYMDHMS
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteStartTm
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTime
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;N_MvData
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvDataAddr
</UL>

<P><STRONG><a name="[135]"></a>MvDataAddr</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = MvDataAddr &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRamData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrpCharRam
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFLBase
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComUse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckpChar
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FpCharRam
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
</UL>

<P><STRONG><a name="[138]"></a>MoveDataLst</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = MoveDataLst &rArr; MvDataAddr &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvDataAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MStepFroze
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFLUse
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPwrErrRcd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxJDErrRcd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxKeyChgRcd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxEOpenRcd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFrozeDTRcd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxHLDRcd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOneByteRcd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxYTblSetRcd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTmTblSetRcd
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTimeRcd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxClrEventRcd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxClrUseRcd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxProgRcd
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVer
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTime
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_NormFroze
</UL>

<P><STRONG><a name="[139]"></a>N_MvData</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = N_MvData &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutLTBL
</UL>

<P><STRONG><a name="[df]"></a>ClrRam</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ClrRam &rArr; SetRamData
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRamData
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_TRx
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_refresh
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeLst
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_AllUse
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRcdLst
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSTD
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MCU
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSafeData_struct_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FHSet
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LVSave
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEData_Fun_Init
</UL>

<P><STRONG><a name="[13a]"></a>SetRam</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetRam &rArr; SetRamData
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRamData
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewProgRcd
</UL>

<P><STRONG><a name="[13b]"></a>SetpCharRam</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetpCharRam &rArr; FpCharRam &rArr; SetRamData
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FpCharRam
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxJDRecord
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillNullData
</UL>

<P><STRONG><a name="[13c]"></a>RevStrLst</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RevStrLst &rArr; RevStr
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevStr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rev4Lst
</UL>

<P><STRONG><a name="[13e]"></a>Rev_4</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Rev_4 &rArr; RevStr
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevStr
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOrderFroze
</UL>

<P><STRONG><a name="[13f]"></a>Rev4Lst</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Rev4Lst &rArr; RevStrLst &rArr; RevStr
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevStrLst
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeLst
</UL>

<P><STRONG><a name="[1a7]"></a>Get_Code_Lst</STRONG> (Thumb, 104 bytes, Stack size 36 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Get_Code_Lst
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
</UL>

<P><STRONG><a name="[140]"></a>RevCopy_4</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RevCopy_4 &rArr; RevCopyRam
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopyRam
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxClrRecord
</UL>

<P><STRONG><a name="[141]"></a>Copy_2</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
</UL>

<P><STRONG><a name="[142]"></a>Cmp_4</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Cmp_4 &rArr; strCmp
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeLst
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOrderFroze
</UL>

<P><STRONG><a name="[e0]"></a>Is_DispCode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextItem
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
</UL>

<P><STRONG><a name="[143]"></a>HEXLst</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HEXLst
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
</UL>

<P><STRONG><a name="[144]"></a>BCDLst</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD
</UL>

<P><STRONG><a name="[e5]"></a>CheckDataAct</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CheckDataAct &rArr; Copy_4 &rArr; CopyRam
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_4
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxClrRecord
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPublicWriteTime
</UL>

<P><STRONG><a name="[1d0]"></a>IsMemZero</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
</UL>

<P><STRONG><a name="[145]"></a>Up_u32Data</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = Up_u32Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTimeOver
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkYFroze
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MStepFroze
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_AllUse
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFHStartTm
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteStartTm
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkKey
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTime
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpEState
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddProgRecord
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeOverTime
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpJDWriter
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRcdMin
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRcdTime
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRcdTime
</UL>

<P><STRONG><a name="[147]"></a>Up_u16Data</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFrozeHM
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFrozeDT
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrFrozeCnt
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddProgRecord
</UL>

<P><STRONG><a name="[148]"></a>Up_u8Data</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrJDOffTime
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRX_Ctrl_Code
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHFrozeStep
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRunType
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFMode
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWeekTblNum
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteActUseMode
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFLMode
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WBaud
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
</UL>

<P><STRONG><a name="[149]"></a>ClrRcdTime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = ClrRcdTime &rArr; Up_u32Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrJDOffTime
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlmState
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxClrRecord
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkKey
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeOverTime
</UL>

<P><STRONG><a name="[14a]"></a>SetRcdTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
</UL>

<P><STRONG><a name="[14b]"></a>SetRcdMin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = SetRcdMin &rArr; Up_u32Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFrozeDT
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCCnt
</UL>

<P><STRONG><a name="[14c]"></a>UpJDWriter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
</UL>

<P><STRONG><a name="[14d]"></a>Up_NormFroze</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = Up_NormFroze &rArr; Up_FrozeData &rArr; Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_FrozeType
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_AllUse
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOrderFroze
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeOverTime
</UL>

<P><STRONG><a name="[150]"></a>GetTimeDiff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetTimeDiff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeOverTime
</UL>

<P><STRONG><a name="[151]"></a>Up_FrozeOverTime</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeData
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDiff
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_NormFroze
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRcdTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
</UL>

<P><STRONG><a name="[152]"></a>Up_ProgFroze</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = Up_ProgFroze &rArr; Up_FrozeData &rArr; Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFrozeDT
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWeekTblNum
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteActUseMode
</UL>

<P><STRONG><a name="[122]"></a>SetEBit</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u8Data
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseProgRecord
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkYFroze
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkAlmJD
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlmState
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxClrRecord
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFacMode
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteStartTm
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPublicWriteTime
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Restore
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTime
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddProgRecord
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDataErr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
</UL>

<P><STRONG><a name="[153]"></a>AddProgRecord</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = AddProgRecord &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u16Data
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_4
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTRxWRecord
</UL>

<P><STRONG><a name="[154]"></a>GetNewProgRcd</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetNewProgRcd &rArr; Copy_4 &rArr; CopyRam
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRam
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseProgRecord
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxProgRcd
</UL>

<P><STRONG><a name="[7c]"></a>CloseProgRecord</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = CloseProgRecord &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewProgRcd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>UpEState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
</UL>

<P><STRONG><a name="[11c]"></a>WDGTm_Refresh</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WDGTm_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
</UL>

<P><STRONG><a name="[1ac]"></a>RSet_WDG</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RSet_WDG
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSend645
</UL>

<P><STRONG><a name="[207]"></a>Set_VDDLO</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, public.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>bcd_add</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, public.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>bcd_inc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, public.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>bcd_dec</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, public.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>CheckpChar</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pubdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvDataAddr
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormCopy
</UL>

<P><STRONG><a name="[156]"></a>GetAddrData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pubdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutHTBL
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSum
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckZero
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBCD
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
</UL>

<P><STRONG><a name="[11a]"></a>cCopyRam</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cCopyRam
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeMinCnt
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData1
</UL>

<P><STRONG><a name="[de]"></a>CopyRam</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CopyRam
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispItem
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispBitLst
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFlashinfo_Restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeLst
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_AllUse
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DIV_READ
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFHStartTm
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgKey
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FarCtrlRet
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxClrRecord
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFarFail
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSetDisp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check645Length
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSend645
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPwrErrRcd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxJDErrRcd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxEOpenRcd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxYTblSetRcd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTmTblSetRcd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPublicWriteTime
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSafeData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSafeData
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSafeState
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FHMode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Feilv
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComUse
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewProgRcd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_ProgFroze
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvDataAddr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_4
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormCopy
</UL>

<P><STRONG><a name="[120]"></a>strCmp</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strCmp
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAddrData
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFlashinfo_Restore
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cGet_First_Data
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeLst
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRX_Ctrl_Code
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteStartTm
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_PubAddr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSafeState
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkKey
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_4
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData1
</UL>

<P><STRONG><a name="[157]"></a>CheckBCD</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAddrData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOrderFroze
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSafeData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
</UL>

<P><STRONG><a name="[158]"></a>CheckZero</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CheckZero
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAddrData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
</UL>

<P><STRONG><a name="[159]"></a>GetSum</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pubdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAddrData
</UL>

<P><STRONG><a name="[11d]"></a>EDataErr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
</UL>

<P><STRONG><a name="[20b]"></a>Reset_FlashInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pubdata.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>Copy_FlashInfo</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + In Cycle
<LI>Call Chain = Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashRandWriteStack
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_AllUse
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_meterconfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolEffect
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOrderFroze
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTRxNum
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSafeData
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWriteKey
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddProgRecord
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u8Data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u16Data
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
</UL>

<P><STRONG><a name="[136]"></a>GetFLBase</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pubdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComUse
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvDataAddr
</UL>

<P><STRONG><a name="[20c]"></a>Reset_pFLUse</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pubdata.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>ReFresh_LVSave</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pubdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSafeData_Data_Refreah
</UL>

<P><STRONG><a name="[15c]"></a>Reset_LVSave</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Reset_LVSave &rArr; cFlashinfo_dianlian_backup &rArr; Write_EEData &rArr;  SetEBit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSafeData_update2bak
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSafeData_struct_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSafeData_set_upb
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSafeData_res_upb
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFlashinfo_dianlian_backup
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_AllUse
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jlrestore
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEXTEEPROM
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ELVSave
</UL>

<P><STRONG><a name="[20d]"></a>Get_ELVSave</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pubdata.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>Read_ELVSave</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pubdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSafeData_struct_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSafeData_Data_Refreah
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LVSave
</UL>

<P><STRONG><a name="[163]"></a>Up_LVSave_io</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, pubdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSafeData_Data_Refreah
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFlashinfo_dianlian_backup
</UL>

<P><STRONG><a name="[164]"></a>Chg_Feilv</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, pubdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_LVSave
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_BkLVSave
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_FeilChg
</UL>

<P><STRONG><a name="[20e]"></a>Get_TTbl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pubdata.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>ReFresh_TTbl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pubdata.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>Read_TTbl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pubdata.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>Up_TTbl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pubdata.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>Chk_FrozeType</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, pubdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeData
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_NormFroze
</UL>

<P><STRONG><a name="[165]"></a>GetFStartAddr</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetFStartAddr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Froze
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
</UL>

<P><STRONG><a name="[166]"></a>GetFrozeStart</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFStartAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPwrErrRcd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxJDErrRcd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxEOpenRcd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFrozeDTRcd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxHLDRcd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxYTblSetRcd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTmTblSetRcd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPwrOffRcd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOverIphRecord
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxProgRcd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRcdLst
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Restore
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
</UL>

<P><STRONG><a name="[167]"></a>Clr_EEData4</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pubdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrNextFH
</UL>

<P><STRONG><a name="[168]"></a>ClrFrozeCnt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = ClrFrozeCnt &rArr; Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u16Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_AllUse
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxClrRecord
</UL>

<P><STRONG><a name="[1a0]"></a>GetFrozeCnt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFrozeCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxProgRcd
</UL>

<P><STRONG><a name="[169]"></a>Write_Froze</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Write_Froze &rArr; Write_EEData &rArr;  SetEBit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFStartAddr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeData
</UL>

<P><STRONG><a name="[14f]"></a>Up_FrozeData</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pubdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = Up_FrozeData &rArr; Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Froze
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_FrozeType
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u16Data
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseProgRecord
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkYFroze
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MStepFroze
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxClrRecord
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTime
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_ProgFroze
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeOverTime
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_NormFroze
</UL>

<P><STRONG><a name="[16f]"></a>GetFHLth</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pubdata.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FHFroze
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FHSet
</UL>

<P><STRONG><a name="[16a]"></a>Read_FHRcd</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pubdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FHSet
</UL>

<P><STRONG><a name="[16b]"></a>Up_FHMode</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, pubdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FHFroze
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FHSet
</UL>

<P><STRONG><a name="[16c]"></a>GetFHTime</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pubdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FHFroze
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FHSet
</UL>

<P><STRONG><a name="[16d]"></a>ClrNextFH</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pubdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_EEData4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FHFroze
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FHSet
</UL>

<P><STRONG><a name="[16e]"></a>Read_FHSet</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, pubdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrNextFH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFHTime
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FHMode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FHRcd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFHLth
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeMinCnt
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
</UL>

<P><STRONG><a name="[170]"></a>Up_FHFroze</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, pubdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrNextFH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFHTime
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FHMode
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFHLth
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
</UL>

<P><STRONG><a name="[212]"></a>Get_FHFrozeBlock</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, pubdata.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>iGetsum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, safedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iGetsum
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSafeData_restoreData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSafeData_checkdata
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSafeData_update2bak
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSafeData_struct_Init
</UL>

<P><STRONG><a name="[213]"></a>cvote</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, safedate.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>iVote</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, safedate.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSafeData_restoreData
</UL>

<P><STRONG><a name="[171]"></a>cSafeData_checkdata</STRONG> (Thumb, 216 bytes, Stack size 44 bytes, safedate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGetsum
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSafeData_Data_Refreah
</UL>

<P><STRONG><a name="[173]"></a>cSafeData_restoreData</STRONG> (Thumb, 242 bytes, Stack size 44 bytes, safedate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iVote
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGetsum
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSafeData_Data_Refreah
</UL>

<P><STRONG><a name="[15b]"></a>cSafeData_Data_Refreah</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, safedate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSafeData_restoreData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSafeData_checkdata
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_LVSave_io
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ELVSave
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReFresh_LVSave
</UL>

<P><STRONG><a name="[15f]"></a>nSafeData_update2bak</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, safedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nSafeData_update2bak &rArr; iGetsum
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGetsum
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LVSave
</UL>

<P><STRONG><a name="[15e]"></a>nSafeData_set_upb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, safedate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LVSave
</UL>

<P><STRONG><a name="[160]"></a>nSafeData_res_upb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, safedate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LVSave
</UL>

<P><STRONG><a name="[15d]"></a>nSafeData_struct_Init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, safedate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nSafeData_struct_Init &rArr; ClrRam &rArr; SetRamData
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGetsum
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ELVSave
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LVSave
</UL>

<P><STRONG><a name="[214]"></a>Check8025TData</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>RTC_TrimSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>SetBatTest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>SetRTCCnt</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, drv_rtcspk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = SetRTCCnt &rArr; SetRcdMin &rArr; Up_u32Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtcunint_write
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeek
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRcdMin
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Restore
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTime
</UL>

<P><STRONG><a name="[217]"></a>SetRTCOut</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>GetTempVBat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>ChkBatVolt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>ChkRTCCal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>SetRTCTrim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>Check_WakeMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>RTC_SetWakeup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>EnterLowPwrMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>RTC_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>ChangeTime</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, drv_rtcspk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = ChangeTime &rArr; SetRTCCnt &rArr; SetRcdMin &rArr; Up_u32Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCCnt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTime
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPublicWriteTime
</UL>

<P><STRONG><a name="[179]"></a>CheckTime</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, drv_rtcspk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCCnt
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgMOD_2
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
</UL>

<P><STRONG><a name="[220]"></a>Do_BeepTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>StartBeep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rtcspk.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>Time_Restore</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_rtcspk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCCnt
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
</UL>

<P><STRONG><a name="[222]"></a>Do_PwrOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inout.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>Delay_SoftRun</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, inout.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSys_Statu_Detc
</UL>

<P><STRONG><a name="[17b]"></a>cSys_Statu_Detc</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, inout.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_SoftRun
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTick_Start
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MCU
</UL>

<P><STRONG><a name="[17e]"></a>MCU_OnLIne_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, inout.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRamData
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTick_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MCU
</UL>

<P><STRONG><a name="[17f]"></a>MCU_OffLIne_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, inout.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTick_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MCU
</UL>

<P><STRONG><a name="[180]"></a>Init_MCU</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, inout.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_OffLIne_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_OnLIne_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSys_Statu_Detc
</UL>

<P><STRONG><a name="[11b]"></a>Get_SYS_Statu</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inout.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
</UL>

<P><STRONG><a name="[cf]"></a>HAL_Delay_us</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, hal_delay_us.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_Delay_us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_StoretData_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cGet_First_Data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTBOC1
</UL>

<P><STRONG><a name="[223]"></a>Send_SCI</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, trx.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>GetProgData</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, trx.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>SCIProg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxProgChip
</UL>

<P><STRONG><a name="[1a9]"></a>Tx_Enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_TRxNum
</UL>

<P><STRONG><a name="[225]"></a>SubSCIBuf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, trx.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>Up_BCDData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Up_BCDData &rArr; Hex_BCD &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_BCD
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxProgRcd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIDTime
</UL>

<P><STRONG><a name="[226]"></a>GetCompData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, trx.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>SetErrReturn</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jbregread
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jlregread
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFHStartTm
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgKey
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_OtherTRx
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRX_Ctrl_Code
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FarCtrlRet
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxClrRecord
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTRxRead
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWriteSPMode
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSetDisp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReadOver
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrReturn
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashSet
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMSet
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFrozeHM
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHFrozeStep
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRunType
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFrozeDT
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFMode
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWeekTblNum
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteActUseMode
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFLMode
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteStartTm
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTime
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPublicWriteTime
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOrderFroze
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTRxNum
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSafeData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSafeData
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWriteKey
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WBaud
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSafeState
</UL>

<P><STRONG><a name="[1a5]"></a>GetIRSafe</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_OtherTRx
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRX_Ctrl_Code
</UL>

<P><STRONG><a name="[182]"></a>AddTRxWRecord</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = AddTRxWRecord &rArr; AddProgRecord &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddProgRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSafeData
</UL>

<P><STRONG><a name="[183]"></a>ChkKey</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = ChkKey &rArr; ClrRcdTime &rArr; Up_u32Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRcdTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgKey
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSafeState
</UL>

<P><STRONG><a name="[186]"></a>GetSafeData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSafeState
</UL>

<P><STRONG><a name="[184]"></a>GetSafeState</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = GetSafeState &rArr; ChkKey &rArr; ClrRcdTime &rArr; Up_u32Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSafeData
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkKey
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_4
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSafeData
</UL>

<P><STRONG><a name="[188]"></a>WBaud</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = WBaud &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u8Data
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChgTRXBd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBaud
</UL>

<P><STRONG><a name="[2e]"></a>WriteBaud</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = WriteBaud &rArr; WBaud &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WBaud
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>RxChgTRXBd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = RxChgTRXBd &rArr; WBaud &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WBaud
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>RxWriteKey</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = RxWriteKey &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>Chk_PubAddr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Chk_PubAddr &rArr; strCmp
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_TRxNum
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTRxNum
</UL>

<P><STRONG><a name="[190]"></a>CheckPubMode</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWriteSPMode
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPublicWriteTime
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOrderFroze
</UL>

<P><STRONG><a name="[18a]"></a>SetTrxDisp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetTrxDisp
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispSubItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSend645
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPublicWriteTime
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOrderFroze
</UL>

<P><STRONG><a name="[18e]"></a>Chk_Mac_99</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteStartTm
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTRxNum
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSafeData
</UL>

<P><STRONG><a name="[18d]"></a>Check_Datatype_Mod_Enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxClrRecord
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSafeData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSafeData
</UL>

<P><STRONG><a name="[18c]"></a>WriteSafeData</STRONG> (Thumb, 532 bytes, Stack size 48 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = WriteSafeData &rArr; AddTRxWRecord &rArr; AddProgRecord &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Datatype_Mod_Enable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_Mac_99
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSafeState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTRxWRecord
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBCD
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_Hex
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopyRam
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevStr
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
</UL>

<P><STRONG><a name="[18f]"></a>ReadSafeData</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ReadSafeData &rArr; Hex_BCD &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDispBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_BCD
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Datatype_Mod_Enable
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormCopy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
</UL>

<P><STRONG><a name="[2a]"></a>ReadWriteTRxNum</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = ReadWriteTRxNum &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_Mac_99
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_PubAddr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>RxOrderFroze</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = RxOrderFroze &rArr; Up_NormFroze &rArr; Up_FrozeData &rArr; Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrxDisp
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPubMode
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBCD
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_NormFroze
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rev_4
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeMinCnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>Chk5Min</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chk5Min
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPublicWriteTime
</UL>

<P><STRONG><a name="[50]"></a>RxPublicWriteTime</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = RxPublicWriteTime &rArr; ChangeTime &rArr; SetRTCCnt &rArr; SetRcdMin &rArr; Up_u32Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDataAct
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk5Min
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrxDisp
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPubMode
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTime
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>ReadWriteTime</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = ReadWriteTime &rArr; ChangeTime &rArr; SetRTCCnt &rArr; SetRcdMin &rArr; Up_u32Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeek
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTime
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopyRam
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>ReadWriteStartTm</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = ReadWriteStartTm &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_Mac_99
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[28]"></a>SetFacMode</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = SetFacMode &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormCopy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>WriteFLMode</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = WriteFLMode &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u8Data
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_Hex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>ReadSTD</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ReadSTD &rArr; Hex_BCD &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_BCD
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>ReadWriteActUseMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = ReadWriteActUseMode &rArr; Up_ProgFroze &rArr; Up_FrozeData &rArr; Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_ProgFroze
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u8Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>WriteWeekTblNum</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = WriteWeekTblNum &rArr; Up_ProgFroze &rArr; Up_FrozeData &rArr; Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_ProgFroze
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u8Data
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>WriteFMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = WriteFMode &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u8Data
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>WriteFrozeDT</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = WriteFrozeDT &rArr; Up_ProgFroze &rArr; Up_FrozeData &rArr; Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeFDT1Froze
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_ProgFroze
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRcdMin
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u16Data
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>WriteRunType</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = WriteRunType &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u8Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>WriteHFrozeStep</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = WriteHFrozeStep &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u8Data
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>WriteFrozeHM</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = WriteFrozeHM &rArr; Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u16Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>GetHex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVer
</UL>

<P><STRONG><a name="[193]"></a>GetMonth</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetMonth &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVer
</UL>

<P><STRONG><a name="[37]"></a>ReadVer</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ReadVer &rArr; MoveDataLst &rArr; MvDataAddr &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMonth
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHex
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>WriteMSet</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteMSet
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>WriteFlashSet</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = WriteFlashSet &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Var_Write_io
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>WriteVolEffect</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, trx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[42]"></a>ReadIDTime</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ReadIDTime &rArr; Up_BCDData &rArr; Hex_BCD &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_BCDData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>FillNullData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FillNullData &rArr; ClrpCharRam &rArr; FpCharRam &rArr; SetRamData
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrpCharRam
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetpCharRam
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOverIphRecord
</UL>

<P><STRONG><a name="[197]"></a>MvTimeYMDHMS</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MvTimeYMDHMS &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPwrOffRcd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxJDRecord
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOverIphRecord
</UL>

<P><STRONG><a name="[198]"></a>OutYTBL</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OutYTBL &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetpCharInc
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxYTblSetRcd
</UL>

<P><STRONG><a name="[19a]"></a>OutTTBL</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OutTTBL &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetpCharInc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTmTblSetRcd
</UL>

<P><STRONG><a name="[19b]"></a>OutHTBL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = OutHTBL &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAddrData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxHLDRcd
</UL>

<P><STRONG><a name="[19c]"></a>OutLTBL</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = OutLTBL &rArr; N_MvData &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;N_MvData
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
</UL>

<P><STRONG><a name="[1a3]"></a>SetDBit5</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxHLDRcd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTmTblSetRcd
</UL>

<P><STRONG><a name="[19d]"></a>SetAAInc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetAAInc
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetpCharInc
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFLUse
</UL>

<P><STRONG><a name="[19e]"></a>GetLRcdLst</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = GetLRcdLst &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFrozeDTRcd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxHLDRcd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxYTblSetRcd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTmTblSetRcd
</UL>

<P><STRONG><a name="[1a6]"></a>ChkPhBC</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
</UL>

<P><STRONG><a name="[19f]"></a>RxProgRcd</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, trx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrpCharRam
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_BCDData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeCnt
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewProgRcd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[1a1]"></a>RxOverIphRecord</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = RxOverIphRecord &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvTimeYMDHMS
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillNullData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
</UL>

<P><STRONG><a name="[1a2]"></a>RxJDRecord</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = RxJDRecord &rArr; MvTimeYMDHMS &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrpCharRam
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvTimeYMDHMS
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetpCharRam
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormCopy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
</UL>

<P><STRONG><a name="[43]"></a>RxPwrOffRcd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = RxPwrOffRcd &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvTimeYMDHMS
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>RxClrUseRcd</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = RxClrUseRcd &rArr; MoveDataLst &rArr; MvDataAddr &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>RxClrEventRcd</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = RxClrEventRcd &rArr; MoveDataLst &rArr; MvDataAddr &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>RxTimeRcd</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = RxTimeRcd &rArr; MoveDataLst &rArr; MvDataAddr &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>RxTmTblSetRcd</STRONG> (Thumb, 226 bytes, Stack size 264 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = RxTmTblSetRcd &rArr; GetLRcdLst &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrpCharRam
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRcdLst
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDBit5
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutTTBL
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>RxYTblSetRcd</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = RxYTblSetRcd &rArr; GetLRcdLst &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRcdLst
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutYTBL
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>RxOneByteRcd</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = RxOneByteRcd &rArr; MoveDataLst &rArr; MvDataAddr &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>RxHLDRcd</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = RxHLDRcd &rArr; GetLRcdLst &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrpCharRam
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRcdLst
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDBit5
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutHTBL
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>RxFrozeDTRcd</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = RxFrozeDTRcd &rArr; GetLRcdLst &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRcdLst
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>RxEOpenRcd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = RxEOpenRcd &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>RxKeyChgRcd</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = RxKeyChgRcd &rArr; MoveDataLst &rArr; MvDataAddr &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>RxJDErrRcd</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = RxJDErrRcd &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>RxPwrErrRcd</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = RxPwrErrRcd &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>GetFLUse</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GetFLUse &rArr; MoveDataLst &rArr; MvDataAddr &rArr; MvData &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAAInc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
</UL>

<P><STRONG><a name="[e2]"></a>Get645Data</STRONG> (Thumb, 3228 bytes, Stack size 216 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = Get645Data &rArr; RxOverIphRecord &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrpCharRam
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddUseLst
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDispSetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDispBits
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFLUse
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxJDRecord
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOverIphRecord
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPhBC
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAAInc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutLTBL
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutHTBL
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutTTBL
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutYTBL
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSafeData
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Datatype_Mod_Enable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIRSafe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_BCDData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeCnt
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeStart
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFLBase
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComUse
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDiff
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_4
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Code_Lst
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetpCharRam
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_4
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormCopy
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkDispItem
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
</UL>

<P><STRONG><a name="[1a8]"></a>Chk_TRxNum</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Chk_TRxNum &rArr; Chk_PubAddr &rArr; strCmp
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_PubAddr
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
</UL>

<P><STRONG><a name="[227]"></a>Chk_Rx68</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trx.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>RxSend645</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RxSend645 &rArr; stream_send_enable &rArr; UART_INTENABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_send_enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSCINUM
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrxDisp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSet_WDG
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrReturn
</UL>

<P><STRONG><a name="[1ae]"></a>SendErrReturn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SendErrReturn &rArr; RxSend645 &rArr; stream_send_enable &rArr; UART_INTENABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSend645
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
</UL>

<P><STRONG><a name="[1af]"></a>Check645Length</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Check645Length &rArr; CopyRam
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
</UL>

<P><STRONG><a name="[1b0]"></a>SetReadOver</STRONG> (Thumb, 226 bytes, Stack size 4 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SetReadOver
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
</UL>

<P><STRONG><a name="[1b1]"></a>RxSetDisp</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = RxSetDisp &rArr; SetDispItem &rArr; UpDisp &rArr; Get645Data &rArr; RxOverIphRecord &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDispItem
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkDispItem
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
</UL>

<P><STRONG><a name="[1b2]"></a>Write645Data</STRONG> (Thumb, 1254 bytes, Stack size 248 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = Write645Data &rArr; ChkDispItem &rArr; Get645Data &rArr; RxOverIphRecord &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkDispItem
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSafeData
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSafeState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTRxWRecord
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckZero
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBCD
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_ProgFroze
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXLst
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Code_Lst
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_4
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
</UL>

<P><STRONG><a name="[1b3]"></a>SetFarFail</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, trx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
</UL>

<P><STRONG><a name="[1be]"></a>IC_645Commniucate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
</UL>

<P><STRONG><a name="[53]"></a>RxWriteSPMode</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RxWriteSPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPubMode
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>RxTRxRead</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RxTRxRead &rArr; RevCopyRam
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopyRam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>WaitTxOver</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxProgChip
</UL>

<P><STRONG><a name="[55]"></a>RxProgChip</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = RxProgChip &rArr; UpDisp &rArr; Get645Data &rArr; RxOverIphRecord &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTxOver
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIProg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>RxClrRecord</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = RxClrRecord &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDataAct
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Datatype_Mod_Enable
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrFrozeCnt
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRcdTime
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopy_4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopyRam
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRX_Ctrl_Code
</UL>

<P><STRONG><a name="[1b8]"></a>FarRetChk</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRX_Ctrl_Code
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FarCtrlRet
</UL>

<P><STRONG><a name="[1b7]"></a>FarCtrlRet</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FarCtrlRet &rArr; CopyRam
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FarRetChk
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRX_Ctrl_Code
</UL>

<P><STRONG><a name="[1b9]"></a>TRX_Ctrl_Code</STRONG> (Thumb, 488 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = TRX_Ctrl_Code &rArr; RxClrRecord &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_FarCtrl
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FarCtrlRet
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FarRetChk
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxClrRecord
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIRSafe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u8Data
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_4
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevStr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_OtherTRx
</UL>

<P><STRONG><a name="[1bb]"></a>Do_OtherTRx</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = Do_OtherTRx &rArr; TRX_Ctrl_Code &rArr; RxClrRecord &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRX_Ctrl_Code
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIRSafe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
</UL>

<P><STRONG><a name="[1bf]"></a>GetFuheLine</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, trx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
</UL>

<P><STRONG><a name="[1bc]"></a>ChgKey</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = ChgKey &rArr; ChkKey &rArr; ClrRcdTime &rArr; Up_u32Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWriteKey
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkKey
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
</UL>

<P><STRONG><a name="[1bd]"></a>Do_SCI</STRONG> (Thumb, 1208 bytes, Stack size 48 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = Do_SCI &rArr; Write645Data &rArr; ChkDispItem &rArr; Get645Data &rArr; RxOverIphRecord &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSCINUM
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_AllUse
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgKey
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuheLine
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_OtherTRx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_645Commniucate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSetDisp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReadOver
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check645Length
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrReturn
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSend645
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_TRxNum
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIRSafe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopyRam
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_TRx
</UL>

<P><STRONG><a name="[81]"></a>Do_TRx</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = Do_TRx &rArr; Do_SCI &rArr; Write645Data &rArr; ChkDispItem &rArr; Get645Data &rArr; RxOverIphRecord &rArr; GetFrozeStart &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>WriteEXTEEPROM</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = WriteEXTEEPROM &rArr; Reset_LVSave &rArr; cFlashinfo_dianlian_backup &rArr; Write_EEData &rArr;  SetEBit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_FlashData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LVSave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>ReadFlashData</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ReadFlashData &rArr; CopyRam
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>ReadExtEEprom</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = ReadExtEEprom &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>Write_meterconfig</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = Write_meterconfig &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>WriteFHStartTm</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = WriteFHStartTm &rArr; Up_u32Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>ReadEEPROMFData</STRONG> (Thumb, 118 bytes, Stack size 240 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ReadEEPROMFData &rArr; Hex_BCD &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_BCD
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>RTC_DIV_READ</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, trx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormCopy
</UL>

<P><STRONG><a name="[228]"></a>RTC_Trim_Enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, trx.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>RTCOFFSETREAD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, trx.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>RTCOFFSEINIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, trx.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>WriteRTCSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, trx.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>Jlregread</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Jlregread &rArr; NormCopy &rArr; CopyRam
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EPADR
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormCopy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>Jbregread</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Jbregread &rArr; Emu_Var_Write &rArr; Emu_Var_Write_io &rArr; BlockEarse &rArr; Full_FF_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Chip_to_StructData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ECADR
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ECADR
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EPADR
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Var_Write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrReturn
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopyRam
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormCopy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>Jlrestore</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = Jlrestore &rArr; sEmuc_ResotreDef &rArr; McuFlashRandWriteStack &rArr; McuFlashRandWrite &rArr; McuFlashPageRandWrite &rArr; McuFlashPageSafeWrite &rArr; McuFlashPageWrite &rArr; HT_Flash_ByteWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEmuc_ResotreDef
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_FlashData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LVSave
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>effective_value</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, trx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = effective_value &rArr; Emu_Var_Write &rArr; Emu_Var_Write_io &rArr; BlockEarse &rArr; Full_FF_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Var_Write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trx.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>GetComUse</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetComUse &rArr; CopyRam
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFLBase
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkYFroze
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvDataAddr
</UL>

<P><STRONG><a name="[22c]"></a>Up_Remain</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, meter.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>GetAlmState</STRONG> (Thumb, 734 bytes, Stack size 8 bytes, meter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRcdTime
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkAlmJD
</UL>

<P><STRONG><a name="[22d]"></a>ChkJDWaitAM</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, meter.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>ChkTimeGate</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, meter.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>Do_JDOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, meter.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkAlmJD
</UL>

<P><STRONG><a name="[1c4]"></a>ChkAlmJD</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, meter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_JDOff
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlmState
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
</UL>

<P><STRONG><a name="[1c6]"></a>GetFrozeLst</STRONG> (Thumb, 528 bytes, Stack size 88 bytes, meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = GetFrozeLst &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_4
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rev4Lst
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevStr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
</UL>

<P><STRONG><a name="[22f]"></a>Do_JDOffPreOver</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, meter.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>MStepFroze</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = MStepFroze &rArr; Up_FrozeData &rArr; Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeData
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeMinCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkYFroze
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeFDT1Froze
</UL>

<P><STRONG><a name="[192]"></a>ChangeFDT1Froze</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = ChangeFDT1Froze &rArr; MStepFroze &rArr; Up_FrozeData &rArr; Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MStepFroze
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFrozeDT
</UL>

<P><STRONG><a name="[1c9]"></a>ChkYMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, meter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkYFroze
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_AllUse
</UL>

<P><STRONG><a name="[1c8]"></a>ChkYFroze</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, meter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkYMode
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MStepFroze
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeData
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComUse
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeMinCnt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
</UL>

<P><STRONG><a name="[1cc]"></a>ChkActFL</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, meter.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
</UL>

<P><STRONG><a name="[1cb]"></a>Up_FLState</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, meter.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
</UL>

<P><STRONG><a name="[1ca]"></a>GetFeilv</STRONG> (Thumb, 1042 bytes, Stack size 152 bytes, meter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FLState
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkActFL
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkYFroze
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_NormFroze
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRcdTime
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u8Data
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeMinCnt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_FeilChg
</UL>

<P><STRONG><a name="[1cd]"></a>Do_FeilChg</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, meter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Feilv
</UL>

<P><STRONG><a name="[1ce]"></a>ClrJDOffTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, meter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRcdTime
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u8Data
</UL>

<P><STRONG><a name="[1cf]"></a>WaitTimeOver</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, meter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
</UL>

<P><STRONG><a name="[80]"></a>CheckFroze</STRONG> (Thumb, 830 bytes, Stack size 96 bytes, meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = CheckFroze &rArr; Up_NormFroze &rArr; Up_FrozeData &rArr; Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_LVSave
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeLst
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_FrozeData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_NormFroze
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRcdTime
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u16Data
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMemZero
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_4
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataLst
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopyRam
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeMinCnt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgMOD_1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEBit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>Do_FarCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, meter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRX_Ctrl_Code
</UL>

<P><STRONG><a name="[1c0]"></a>Clr_AllUse</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, docard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = Clr_AllUse &rArr; Up_NormFroze &rArr; Up_FrozeData &rArr; Up_u16Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkYMode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrFrozeCnt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LVSave
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_NormFroze
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_u32Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeMinCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
</UL>

<P><STRONG><a name="[1ab]"></a>GetSCINUM</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, streamio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_send_enable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSend645
</UL>

<P><STRONG><a name="[104]"></a>Uart_Struct_Get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, streamio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendIntFun
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceIntFun
</UL>

<P><STRONG><a name="[105]"></a>stream_rece_fun_645</STRONG> (Thumb, 358 bytes, Stack size 0 bytes, streamio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceIntFun
</UL>

<P><STRONG><a name="[106]"></a>stream_send_fun_645</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, streamio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stream_send_fun_645 &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendIntFun
</UL>

<P><STRONG><a name="[1ad]"></a>stream_send_enable</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, streamio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stream_send_enable &rArr; UART_INTENABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSCINUM
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendIntEnable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSend645
</UL>

<P><STRONG><a name="[230]"></a>stream_send_over</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, streamio.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>stream_refresh</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, streamio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = stream_refresh &rArr; UART_init &rArr; HT_UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTENABLE
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_fun_send
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_cSilence_fun
</UL>

<P><STRONG><a name="[231]"></a>Get_Changel_BpsConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, streamio.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>stream_reset</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, streamio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = stream_reset &rArr; UARR_Ir_Chanel_Init &rArr; HT_UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARR_Ir_Chanel_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_cSilence_fun
</UL>

<P><STRONG><a name="[10a]"></a>stream_cSilence_fun</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, streamio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = stream_cSilence_fun &rArr; stream_reset &rArr; UARR_Ir_Chanel_Init &rArr; HT_UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_reset
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_refresh
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_fun
</UL>

<P><STRONG><a name="[1d3]"></a>stream_fun_send</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, streamio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_refresh
</UL>

<P><STRONG><a name="[109]"></a>debug_break</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, globlvar_debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_FlashData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_fun
</UL>

<P><STRONG><a name="[232]"></a>DispData_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, indata_oper.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>Init_FlashData</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, indata_oper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Init_FlashData &rArr; Write_EEData &rArr;  SetEBit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_break
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFlashinfo_Restore
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jlrestore
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEXTEEPROM
</UL>

<P><STRONG><a name="[233]"></a>eeprom_data_check</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, indata_oper.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>cGet_First_Data</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, indata_oper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = cGet_First_Data &rArr; EEData_Safe_Read &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_us
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEData_Safe_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFlashinfo_Restore
</UL>

<P><STRONG><a name="[1d5]"></a>Exteeprom_2_FlashInfo</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, indata_oper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = Exteeprom_2_FlashInfo &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_EEData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFlashinfo_Restore
</UL>

<P><STRONG><a name="[74]"></a>cFlashinfo_Restore</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, indata_oper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = cFlashinfo_Restore &rArr; cGet_First_Data &rArr; EEData_Safe_Read &rArr; Read_EEData &rArr; EDataErr &rArr; SetEBit &rArr; Up_u8Data &rArr; Copy_FlashInfo &rArr;  Read_EEData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRam
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exteeprom_2_FlashInfo
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cGet_First_Data
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_FlashData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>cFlashinfo_dianlian_backup</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, indata_oper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = cFlashinfo_dianlian_backup &rArr; Write_EEData &rArr;  SetEBit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EEData
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_LVSave_io
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LVSave
</UL>

<P><STRONG><a name="[1d7]"></a>enMcuAddr_Check</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, flashsave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashPageRandWrite
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashPageWrite
</UL>

<P><STRONG><a name="[1db]"></a>McuFlashRandWrite</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, flashsave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = McuFlashRandWrite &rArr; McuFlashPageRandWrite &rArr; McuFlashPageSafeWrite &rArr; McuFlashPageWrite &rArr; HT_Flash_ByteWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashPageRandWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashRandWriteStack
</UL>

<P><STRONG><a name="[d8]"></a>McuFlashRandWriteStack</STRONG> (Thumb, 44 bytes, Stack size 1040 bytes, flashsave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = McuFlashRandWriteStack &rArr; McuFlashRandWrite &rArr; McuFlashPageRandWrite &rArr; McuFlashPageSafeWrite &rArr; McuFlashPageWrite &rArr; HT_Flash_ByteWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashRandWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFlashInfo
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEmuc_ResotreDef
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_FlashInfo
</UL>

<P><STRONG><a name="[1dd]"></a>HT_CMU_SysClkGet</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ht6xxx_cmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait2mS
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_ISO7816_Init
</UL>

<P><STRONG><a name="[64]"></a>HT_CMU_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ht6xxx_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HT_CMU_Init &rArr; Wait2mS
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait2mS
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Init
</UL>

<P><STRONG><a name="[234]"></a>HT_CMU_ClkoutSet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ht6xxx_cmu.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>HT_CMU_ClkCtrl0Config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ht6xxx_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_CMU_ClkCtrl0Config
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[fb]"></a>HT_CMU_ClkCtrl1Config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ht6xxx_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_CMU_ClkCtrl1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ini1t
</UL>

<P><STRONG><a name="[235]"></a>HT_CMU_JTAGStatusGet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht6xxx_cmu.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>HT_CMU_StopFlagGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht6xxx_cmu.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>HT_CMU_FlashDly_Set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ht6xxx_cmu.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>HT_CMU_Prefetch_Set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht6xxx_cmu.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>HT_EXTIRise_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ht6xxx_exti.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>HT_EXTIFall_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht6xxx_exti.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>HT_EXTIRise_ITFlagStatusGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht6xxx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>HT_EXTIFall_ITFlagStatusGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht6xxx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>HT_EXTIRise_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht6xxx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>HT_EXTIFall_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht6xxx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[23b]"></a>HT_EXTI_FilterConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht6xxx_exti.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>HT_Flash_ByteWrite</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ht6xxx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HT_Flash_ByteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Var_Write_io
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Put
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashPageWrite
</UL>

<P><STRONG><a name="[23c]"></a>HT_Flash_ByteRead</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ht6xxx_flash.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>HT_Flash_HalfWordWrite</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ht6xxx_flash.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>HT_Flash_HalfWordRead</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ht6xxx_flash.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>HT_Flash_WordWrite</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ht6xxx_flash.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>HT_Flash_WordRead</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ht6xxx_flash.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>HT_Flash_PageErase</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ht6xxx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockEarse
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashPageSafeWrite
</UL>

<P><STRONG><a name="[241]"></a>HT_Flash_ChipErase</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ht6xxx_flash.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>HT_GPIO_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, ht6xxx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[242]"></a>HT_GPIO_AFInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, ht6xxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>HT_GPIO_BitsSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht6xxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>HT_GPIO_BitsReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht6xxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>HT_GPIO_BitsToggle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht6xxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>HT_GPIO_BitsRead</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht6xxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>HT_GPIO_HighCurrentSet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ht6xxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>HT_LCD_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ht6xxx_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[248]"></a>HT_LCD_Write</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht6xxx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>HT_LCD_Read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht6xxx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>HT_PMU_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ht6xxx_pmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_PMU_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_Init
</UL>

<P><STRONG><a name="[24a]"></a>HT_PMU_HoldLDOConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ht6xxx_pmu.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>HT_PMU_DisChargeConfig</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ht6xxx_pmu.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>HT_PMUState_FlagStatusGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht6xxx_pmu.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>HT_PMU_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht6xxx_pmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_Init
</UL>

<P><STRONG><a name="[8d]"></a>HT_PMU_ITFlagStatusGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht6xxx_pmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>HT_PMU_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht6xxx_pmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_IRQHandler
</UL>

<P><STRONG><a name="[24d]"></a>HT_WakeFlagStatusGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht6xxx_reset.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>HT_WakeFlagClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht6xxx_reset.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>HT_ResetFlagStatusGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht6xxx_reset.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>HT_ResetFlagClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht6xxx_reset.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>HT_EnterHold</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht6xxx_reset.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>HT_EnterSleep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht6xxx_reset.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>HT_FreeDog</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht6xxx_reset.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_fun
</UL>

<P><STRONG><a name="[253]"></a>HT_SHModeDogConfigure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht6xxx_reset.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>HT_RTC_Init</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, ht6xxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>HT_RTC_Read</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, ht6xxx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Get_SafeIo
</UL>

<P><STRONG><a name="[1e7]"></a>HT_RTC_Write</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ht6xxx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_RTC_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtcunint_write
</UL>

<P><STRONG><a name="[255]"></a>HT_RTC_TMRConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ht6xxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>HT_RTC_ToutSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht6xxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>HT_RTC_AlarmSet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht6xxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>HT_RTC_ITConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ht6xxx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[258]"></a>HT_RTC_ITFlagStatusGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht6xxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>HT_RTC_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht6xxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>HT_RTC_LoadInfoData</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, ht6xxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>HT_SPI_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ht6xxx_spi.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>HT_SPI_ITFlagStatusGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht6xxx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SPI_SendByte
</UL>

<P><STRONG><a name="[a1]"></a>HT_SPI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht6xxx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
</UL>

<P><STRONG><a name="[1de]"></a>HT_SPI_SendByte</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ht6xxx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SPI_ITFlagStatusGet
</UL>

<P><STRONG><a name="[25c]"></a>HT_SPI_CSHigh</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht6xxx_spi.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>HT_SPI_CSLow</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht6xxx_spi.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>HT_TBSConfig</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ht6xxx_tbs.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>HT_TBS_PeriodSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht6xxx_tbs.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>HT_TBS_CMPThresholdSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ht6xxx_tbs.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>HT_TBS_ValueRead</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, ht6xxx_tbs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[261]"></a>HT_TBS_ITConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ht6xxx_tbs.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>HT_TBS_ITFlagStatusGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht6xxx_tbs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBS_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>HT_TBS_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht6xxx_tbs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBS_IRQHandler
</UL>

<P><STRONG><a name="[262]"></a>HT_TMR_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht6xxx_timer.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>HT_TMR_CaptureGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht6xxx_timer.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>HT_TMR_CountGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht6xxx_timer.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>HT_TMR_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht6xxx_timer.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>HT_TMR_ITFlagStatusGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht6xxx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_1_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_0_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>HT_TMR_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht6xxx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_1_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_0_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>HT_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ht6xxx_uart&7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HT_UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_SysClkGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ini1t
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARR_Ir_Chanel_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_IR_Init
</UL>

<P><STRONG><a name="[1e0]"></a>HT_IR_Init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ht6xxx_uart&7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_Init
</UL>

<P><STRONG><a name="[1e1]"></a>HT_ISO7816_Init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ht6xxx_uart&7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_SysClkGet
</UL>

<P><STRONG><a name="[266]"></a>HT_UART_ITConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ht6xxx_uart&7816.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>HT_UART_ITFlagStatusGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht6xxx_uart&7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>HT_UART_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht6xxx_uart&7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[267]"></a>HT_ISO7816_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht6xxx_uart&7816.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>HT_ISO7816_ITFlagStatusGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht6xxx_uart&7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>HT_ISO7816_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht6xxx_uart&7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[268]"></a>HT_UART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht6xxx_uart&7816.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>HT_UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht6xxx_uart&7816.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>HT_ISO7816_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht6xxx_uart&7816.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>HT_ISO7816_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht6xxx_uart&7816.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>HT_UART_RXFilterConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ht6xxx_uart&7816.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>Time_Cnt_Exchange_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gettimecnt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>GetCntTime</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, gettimecnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopyRam
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgMOD_1
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeLst
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteStartTm
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTime
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPublicWriteTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCCnt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
</UL>

<P><STRONG><a name="[133]"></a>GetTimeCnt</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, gettimecnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRam
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBCD
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevCopyRam
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_break
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgMOD_1
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrTimeCnt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeilv
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeLst
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFHStartTm
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRX_Ctrl_Code
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteStartTm
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTime
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPublicWriteTime
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTime
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvData
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt_inputbin
</UL>

<P><STRONG><a name="[79]"></a>GetCurrTimeCnt</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gettimecnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = GetCurrTimeCnt &rArr; GetTimeCnt &rArr; GetCntTime &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e3]"></a>GetTimeCnt_inputbin</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gettimecnt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
</UL>

<P><STRONG><a name="[176]"></a>GetWeek</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gettimecnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetWeek &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCCnt
</UL>

<P><STRONG><a name="[26d]"></a>UpDateRtcDateTime_Get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc_app_ht5019.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>UpDateRtcDateTime_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc_app_ht5019.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>Rtc_Get_SafeIo</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, rtc_app_ht5019.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Rtc_Get_SafeIo &rArr; BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_RTC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Get_callback
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Get_Charp
</UL>

<P><STRONG><a name="[26f]"></a>Rtc_Mod_SafeIo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc_app_ht5019.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>Rtc_Get_Charp</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtc_app_ht5019.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Get_SafeIo
</UL>

<P><STRONG><a name="[1e6]"></a>RTC_2_HT5019RTC</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, rtc_app_ht5019.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_2_HT5019RTC
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtcunint_write
</UL>

<P><STRONG><a name="[177]"></a>Rtcunint_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtc_app_ht5019.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Rtcunint_write &rArr; RTC_2_HT5019RTC
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_2_HT5019RTC
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_RTC_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCCnt
</UL>

<P><STRONG><a name="[270]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_us
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Energy
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inc_Use
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5l
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIDTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSys_Statu_Detc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeek
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDiff
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRcdMin
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MulDivX
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrozeMinCnt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgMOD_1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgMOD_2
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_UART_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgMOD_1
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_ISO7816_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[271]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Put
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Get_First
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inc_Use
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_BCD
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFroze
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSend645
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOverIphRecord
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutTTBL
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVer
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMonth
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChgTRXBd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFStartAddr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewProgRcd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddProgRecord
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeclock_get
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterData_Get
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DianLian_Restore
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashPageRandWrite
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exteeprom_2_FlashInfo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Var_Write
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[272]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Get_First
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[273]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeclock_get
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DianLian_Restore
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_reset
</UL>

<P><STRONG><a name="[275]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1d8]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Get_SafeIo
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashPageWrite
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get645Data
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;effective_value
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jlrestore
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jbregread
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jlregread
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEPROMFData
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_meterconfig
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_SCI
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write645Data
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPwrErrRcd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxJDErrRcd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxEOpenRcd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFrozeDTRcd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxHLDRcd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxYTblSetRcd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTmTblSetRcd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPwrOffRcd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxJDRecord
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxOverIphRecord
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxProgRcd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIDTime
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolEffect
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashSet
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMSet
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFrozeDT
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFMode
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWeekTblNum
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSTD
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFLMode
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTime
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteTRxNum
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSafeData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSafeData
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWriteKey
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBaud
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSafeState
</UL>

<P><STRONG><a name="[276]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_data
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPowerP
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_data
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPowerP
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadI1rms
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUrms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Chip_to_StructData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_read
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5l
</UL>

<P><STRONG><a name="[278]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_data
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadI1rms
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUrms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_read
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5l
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5l
</UL>

<P><STRONG><a name="[1ef]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5l
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5l
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5l
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_read
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_data
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPowerP
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadI1rms
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUrms
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Var_Write
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5l
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_5
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB_1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Trim_IB
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_proc
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_data
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[279]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[27a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[27b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1e9]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[1ee]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1ea]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[57]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[27c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>__0fprintf$6</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf6.o(i.__0fprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27d]"></a>__1fprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0fprintf$6), UNUSED)

<P><STRONG><a name="[8c]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0fprintf$6), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfdatano
</UL>

<P><STRONG><a name="[1f1]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[e4]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, disp.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDisp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_send_fun_645
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TBS_ValueRead
</UL>

<P><STRONG><a name="[27e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[25]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0fprintf$6)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[71]"></a>NVIC_SetPriority</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>emu_var_cal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = emu_var_cal &rArr; Emu_Chip_to_StructData &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_StoretData_To_Chip
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Chip_to_StructData
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var_const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var_32k
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var_225k
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_emu_var
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_init
</UL>

<P><STRONG><a name="[ab]"></a>load_emu_var</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_checksum
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_checksum
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Chip_to_StructData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_var_cal
</UL>

<P><STRONG><a name="[ae]"></a>load_emu_var_225k</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_checksum
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_checksum
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Chip_to_StructData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_var_cal
</UL>

<P><STRONG><a name="[af]"></a>load_emu_var_32k</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_checksum
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_checksum
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Chip_to_StructData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_var_cal
</UL>

<P><STRONG><a name="[b0]"></a>load_emu_var_const</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_checksum
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_checksum
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Chip_to_StructData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emu_var_cal
</UL>

<P><STRONG><a name="[f7]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, pmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_Init
</UL>

<P><STRONG><a name="[fd]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uartio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTENABLE
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ini1t
</UL>

<P><STRONG><a name="[101]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uartio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
</UL>

<P><STRONG><a name="[103]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uartio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendIntEnable
</UL>

<P><STRONG><a name="[fc]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uartio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ini1t
</UL>

<P><STRONG><a name="[1d6]"></a>McuFlashPageWrite</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, flashsave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = McuFlashPageWrite &rArr; HT_Flash_ByteWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteWrite
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enMcuAddr_Check
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashPageSafeWrite
</UL>

<P><STRONG><a name="[1d9]"></a>McuFlashPageSafeWrite</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, flashsave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = McuFlashPageSafeWrite &rArr; McuFlashPageWrite &rArr; HT_Flash_ByteWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_PageErase
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashPageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashPageRandWrite
</UL>

<P><STRONG><a name="[1da]"></a>McuFlashPageRandWrite</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, flashsave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = McuFlashPageRandWrite &rArr; McuFlashPageSafeWrite &rArr; McuFlashPageWrite &rArr; HT_Flash_ByteWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enMcuAddr_Check
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashPageSafeWrite
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuFlashRandWrite
</UL>

<P><STRONG><a name="[1dc]"></a>Wait2mS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ht6xxx_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Wait2mS
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_SysClkGet
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_Init
</UL>

<P><STRONG><a name="[1e2]"></a>ChgMOD_1</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gettimecnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ChgMOD_1 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeCnt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCntTime
</UL>

<P><STRONG><a name="[1f4]"></a>_printf_core</STRONG> (Thumb, 768 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf$6
</UL>

<P><STRONG><a name="[1f6]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f5]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
